<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 	http://www.springframework.org/schema/beans/spring-beans.xsd 
 	http://www.springframework.org/schema/aop 
 	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/context 
 	http://www.springframework.org/schema/context/spring-context-4.0.xsd
 	http://www.springframework.org/schema/tx 
 	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 自动扫描与装配bean -->
	<context:component-scan base-package="cn.com.egova"></context:component-scan>
	<!-- 加载外部的properties配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
 
	<!-- 配置数据库连接池（c3p0） -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 基本信息 -->
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 其他配置 -->
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3"></property>
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="3"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="5"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="maxStatements" value="8"></property>
		<!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 
			0 -->
		<property name="maxStatementsPerConnection" value="5"></property>
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<!-- 配置数据库连接池（dbcp） -->
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- 基本信息 -->
		<property name="url" value="${jdbc.url}"></property>
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 其他配置 -->
		<!--可选 启动时创建的连接数 -->
		<property name="initialSize" value="5"></property>
		<!--可选 同时可从池中分配的最多连接数,0无限制 -->
		<property name="maxActive" value="10"></property>
		<!--可选 池中不会被释放的最多空闲连接数, 0无限制 -->
		<property name="maxIdle" value="3"></property>
		<!--可选 同时能从语句池中分配的预处理语句最大值,0无限制 -->
		<property name="maxOpenPreparedStatements" value="100"></property>
		<!-- 可选 抛异常前池等待连接回收最大时间（当无可用连接）,-1无限等待 -->
		<property name="maxWait" value="1000"></property>
		<!--可选 连接在池中保持空闲而不被回收的最大时间 -->
		<property name="minEvictableIdleTimeMillis" value="2000"></property>
		<!--可选 不创建新连接情况下池中保持空闲的最小连接数 -->
		<property name="minIdle" value="2"></property>
		<!--可选 布尔值，是否对预处理语句进行池管理 -->
		<property name="poolPreparedStatements" value="true"></property>
	</bean>
	

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 映射文件形式1:SessionFactory的配置引用hibernate.cfg.xml -->
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>-->		
 		<!-- 映射文件形式2:在mappingResources中使用list或set等列出映射实体文件-->
		<!-- 
		<property name="mappingResources">
			<list>
				<value>cn/com/egova/bean/User.hbm.xml</value>
			</list>
		</property>
		 -->
		<!-- 自动扫描指定包结构中的实体对类(即开发中常用的注解)-->
		<property name="packagesToScan" value="cn.com.egova" />
		
		<!-- 设置Hibernate的相关属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 设置Hibernate的数据库方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 是否在控制台显示sql -->
				<prop key="show_sql">true</prop>
				<!-- 是否格式化sql,优化显示 -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 是否开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<!-- 数据库批量查询最大数 -->
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<!-- 是否自动提交事务 -->
				<prop key="hibernate.connection.autocommit">true</prop>
				<!-- 指定hibernate在何时释放JDBC连接 -->
				<prop key="hibernate.connection.release_mode">auto</prop>
				<!-- 创建session方式 hibernate4.x 的方式 -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包，所以把它设置为none即可 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
	</bean>

	<!-- 使用hibernateTemplate工具 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- 配置spring的声明性事务 -->
	<bean class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		id="transactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			  <!-- <tx:method name="save*" propagation="REQUIRED"/>
		      <tx:method name="del*" propagation="REQUIRED"/>
		      <tx:method name="update*" propagation="REQUIRED"/>
		      <tx:method name="add*" propagation="REQUIRED"/>
		      <tx:method name="find*" propagation="REQUIRED"/>
		      <tx:method name="get*" propagation="REQUIRED"/>
		      <tx:method name="apply*" propagation="REQUIRED"/> -->
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切入点 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.com.egova.dao.*.*(..))"
			id="pointCut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config>
</beans>